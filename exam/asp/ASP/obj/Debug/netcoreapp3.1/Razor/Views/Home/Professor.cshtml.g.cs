#pragma checksum "/Users/adrian/UBB/web/exam/asp/ASP/Views/Home/Professor.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fd214ceb44a65dce051fc67a6fc299f390d72571"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Professor), @"mvc.1.0.view", @"/Views/Home/Professor.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/adrian/UBB/web/exam/asp/ASP/Views/_ViewImports.cshtml"
using ASP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/adrian/UBB/web/exam/asp/ASP/Views/_ViewImports.cshtml"
using ASP.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/adrian/UBB/web/exam/asp/ASP/Views/Home/Professor.cshtml"
using ASP.Controllers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fd214ceb44a65dce051fc67a6fc299f390d72571", @"/Views/Home/Professor.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b6b3291f2cd4500dd71aedf1dc47f2afe05e8be6", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Professor : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "/Users/adrian/UBB/web/exam/asp/ASP/Views/Home/Professor.cshtml"
  
    ViewData["Title"] = "Exam - Professor";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""professor-container"">
    <h2 class=""title"">Hello, <span id=""username""></span>!</h2>
    <p>Below are all the students you can manage, displayed by group.</p>

    <a class=""logout"" onclick=""logout()"">Logout</a>

    <div class=""content""></div>
</div>

");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    <script>\r\n        $(document).ready(function () {\r\n            const username = \"");
#nullable restore
#line 20 "/Users/adrian/UBB/web/exam/asp/ASP/Views/Home/Professor.cshtml"
                         Write(ViewBag.Username);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";

            $('.title #username').text(username);

            $.get(""/Professor/GetGroups"", { username: username },
                function (groupsData, status) {
                    if (status === 'success') {
                        const groups = groupsData;

                        const content = $('.content');

                        const tabLinks = $('<div class=""tab""></div>');

                        content.append(tabLinks);

                        groups.forEach(groupId => {
                            $.get(""/Professor/GetStudentsByGroup"", { groupId },
                                function (studentsData, status) {
                                    if (status === 'success') {
                                        const tabLink = $(`<button class=""tab-links"" id=""tab-${groupId}""
                                            onclick=""selectGroup(event, ${groupId})"">${groupId}</button>`);
                                        const tabContent = $(`<div id=""${groupId");
                WriteLiteral(@"}"" class=""tab-content"">
                                            <h3>Group ${groupId}</h3>
                                            <div class=""students"">${studentsData}</div>
                                        `);

                                        // If this is the first group, make the tab active by default.
                                        if (groups.indexOf(groupId) === 0) {
                                            tabLink.addClass('active');
                                            tabContent.css('display', 'block');
                                        }

                                        // Attach onchange event listener to grade input.
                                        tabContent.find('#grade').each(function (index, object) {
                                            $(object).on(""focusout"", function () {
                                                const studentId = $(this).parent().parent().attr('id').split('-')[1];
                  ");
                WriteLiteral(@"                              const newGrade = $(this).val();

                                                assignGrade(studentId, newGrade);
                                            });
                                        });

                                        // Add pagination for students content.
                                        const pagination = $('<div class=""pagination""></div>')

                                        pagination.append('<a href=""#"">&laquo;</a>')

                                        tabContent.find('.students .page-content').each(function (index, object) {
                                            const page = index + 1;
                                            const pageLink = $(`<a class=""page-links"" onclick=""selectPage(event, ${groupId}, ${page})"">${page}</a>`);

                                            if (index === 0) {
                                                pageLink.addClass('active');
                                 ");
                WriteLiteral(@"           }

                                            pagination.append(pageLink);
                                        });

                                        pagination.append('<a href=""#"">&raquo;</a>')

                                        tabContent.append(pagination);

                                        tabLinks.append(tabLink);
                                        content.append(tabContent);
                                    }
                                });
                        });
                    }
                });
        });

        function assignGrade(studentId, newGrade) {
            $.post(""/Professor/AssignGrade"", { studentId, newGrade },
                function (message, status) {
                    if (status === 'success') {
                        alert(message);
                    }
                });
        }

        function selectGroup(event, groupId) {
            // Declare all variables
            let i, tab");
                WriteLiteral(@"Content, tabLinks;

            // Get all elements with class=""tab-content"" and hide them
            tabContent = document.getElementsByClassName('tab-content');
            for (i = 0; i < tabContent.length; i++) {
                tabContent[i].style.display = 'none';
            }

            // Get all elements with class=""tab-links"" and remove the class ""active""
            tabLinks = document.getElementsByClassName('tab-links');
            for (i = 0; i < tabLinks.length; i++) {
                tabLinks[i].className = tabLinks[i].className.replace(' active', '');
            }

            // Show the current tab, and add an ""active"" class to the button that opened the tab
            document.getElementById(groupId).style.display = 'block';
            event.currentTarget.className += ' active';
        }

        function selectPage(event, groupId, page) {
            // Declare all variables
            let i, pageElement, pageLink;

            // Look for elements only in ");
                WriteLiteral(@"the current group content
            const content = document.getElementById(groupId);

            // Get all elements with class=""page-content"" and hide them
            pageElement = content.getElementsByClassName('page-content');
            for (i = 0; i < pageElement.length; i++) {
                pageElement[i].style.display = 'none';
            }

            // Get all elements with class=""tab-links"" and remove the class ""active""
            pageLink = content.getElementsByClassName('page-links');
            for (i = 0; i < pageLink.length; i++) {
                pageLink[i].className = pageLink[i].className.replace(' active', '');
            }

            // Show the current tab, and add an ""active"" class to the button that opened the tab
            content.querySelector(`#page-${page}`).style.display = 'block';
            event.currentTarget.className += ' active';
        }

        function logout() {
            $.post(""/Login/Logout"",
                function (data,");
                WriteLiteral(" status) {\r\n                    if (status === \'success\') {\r\n                        location.reload();\r\n                    }\r\n                });\r\n        }\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
